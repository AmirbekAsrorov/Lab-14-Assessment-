#include <iostream>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <string>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <queue>
#include <stack>

using namespace std;

void Problem1(){
    cout<<"Problem 1"<<endl;
    map<int, int>m;
    m[1] = 1;
    m[2] = 4;
    m[3] = 9;
    m[4] = 16;
    m[5] = 25;

    for(auto n : m){
        cout << "Square of " << n.first << " is " << n.second << endl;
}
}
void Problem2(){
    cout << "Problem 2" << endl;
    map<int, string> m;
    m[74] = "Mike";
    m[76] = "Elena";
    m[93] = "David";
    m[70] = "George";
    m[89] = "Indira";

    for(auto n : m){
        cout << n.first << " place is " << n.second << endl;
}
}
void Problem3()
{
    cout << "Problem 3" << endl;
    map<char, int> m;
    for (char l = 'A'; l <= 'Z'; l++){
        m[l] = l - 'A' + 1;
}
    char n;
    cin >> n;
    cout << m[n] << endl;
}
void printMap(const map<int, double> &m){
    for(const auto &n : m){
        cout << n.first <<": "<< n.second<<endl;
    cout<<endl;
}
}
void Problem4(){
    cout<<"Problem 4"<<endl;
    map<int, double> m={make_pair(4, 7.5),
                          make_pair(25, 6.01),
                          make_pair(-9, 3.2),
                          make_pair(12, 5.16)};
    printMap(m);
    m[3]=3.75;
    printMap(m);
    m[-10]=4.3;
    printMap(m);
    auto it = m.find(12);
    m.erase(it);
    printMap(m);
    m[-9]=4.44;
    printMap(m);
}
void printUnorderedMap(const unordered_map<string, int> &m)
{
    for (const auto &n : m){
        cout<<n.first<<" : "<<n.second<<endl;
    cout<<endl;
}
}
void Problem5(){
    cout<<"Problem 5"<<endl;
    unordered_map<string, int> m = {make_pair("Earth", 3),
                                    make_pair("Mercury", 1)};                            make_pair("Venus", 2)};
    printUnorderedMap(m);
    m.insert({"Mars", 4});
    printUnorderedMap(m);
    m["Saturn"]=6;
    m["Neptune"]=8;
    printUnorderedMap(m);
    cout<<m.size()<<endl;
    m.erase("Venus");
    printUnorderedMap(m);
}

void Problem6(){
    cout << "Problem 6" << endl;
    multimap<int, int> m = {make_pair(100, 3),
                            make_pair(150, 4),
                            make_pair(100, 90)};
    cout<<m.count(100)<<endl;
    m.insert(make_pair(200, 32));
    m.insert(make_pair(100, -12));
    m.insert(make_pair(90, 45));
    auto it=m.upper_bound(100);
    for(int i=0; i<2 && it!=m.end();++i,++it){
        cout<<it->first<<": "<<it->second<<endl;
    cout<<endl;
}
    auto range = m.equal_range(100);
    if (range.first != range.second){
        m.erase(range.first, --range.second);
}
    for (const auto &n : m){
        cout << n.first << ": " << n.second << endl;
}
}
void Problem7(){
    cout<<"Problem 7"<<endl;

    unordered_map<string, int> m;
    int n;
    cin>>n;
    string name;
    for(int i=0;i<n;i++){
        cin>>name;
        if(m.find(name)==m.end()){
            m[name]=1;
            cout<<"OK"<<endl;
        }
        else{
            string newName=name+to_string(m[name]++);
            m[newName]=1;
            cout<<newName<<endl;
        }
    }
}

void Problem8(){
    cout<<"Problem 8"<<endl;
    multiset<int> m;
    int n,j;
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>j;
        m.insert(j);
    }
    for (const auto &n : m){
        if (m.count(n)!=n){
            cout<<"Not good sequence"<<endl;
            return;
        }
    cout<<"Good sequence"<<endl;
}
}
void show(const set<int> &s){
    for(auto it=s.begin();it!=s.end();++it){
        cout<<*it<<" ";
    cout<<endl;
}
}
void Problem9(){
    cout<<"Problem 9"<<endl;
    set<int> s;
    s.insert(5);
    s.insert(39);
    s.insert(10);
    s.insert(64);
    s.insert(82);
    s.insert(35);
    s.insert(10);
    s.insert(54);
    show(s);
}
void show(const unordered_set<int> &s){
    for(auto it=s.begin();it!=s.end();++it){
        cout<<*it<<" ";
    cout<<endl;
}
}
void Problem10(){
    cout<<"Problem 10"<<endl;
    unordered_set<int> s;
    s.insert(5);
    s.insert(39);
    s.insert(10);
    s.insert(64);
    s.insert(82);
    s.insert(35);
    s.insert(10);
    s.insert(54);
    show(s);
}

void show(const multiset<int> &s){
    for(auto it = s.begin(); it != s.end(); ++it){
        cout<<*it<<" ";
    cout<<endl;
}
}
void Problem11(){
    cout<<"Problem 11"<<endl;

    multiset<int> s;
    s.insert(5);
    s.insert(39);
    s.insert(10);
    s.insert(64);
    s.insert(82);
    s.insert(35);
    s.insert(10);
    s.insert(54);
    show(s);
    auto it1 = s.lower_bound(10);
    auto it2 = s.lower_bound(54);
    if(it1!=s.end() && it2!=s.end() && it1!=it2){
        s.erase(it1, it2);}
    show(s);
}

void Problem12(){
    cout<<"Problem 12"<<endl;
    srand(static_cast<unsigned int>(time(NULL)));
    multiset<int> s;
    for (int i = 0; i < 10; ++i){
        s.insert(rand() % 10 + 11);
}
    int n;
    cin>>n;

    if (s.find(n) != s.end()){
        cout<<"YES"<<endl;
        return;
    }

    show(s);
}
void Problem13(){
    cout << "Problem 13" << endl;
    set<int> s,ss,u,i,d;
    int n,e;
    cin >>n;
    for(int i=0;i<n;++i){
        cin>>e;
        s.insert(e);
        u.insert(e);
        d.insert(e);
    }
    for(int i=0;i<n;++i){
        cin>>e;
        ss.insert(e);
        u.insert(e);
        d.insert(e);
    }
    for(const int &n : s){
        if(ss.find(n)!=ss.end())
        {
            i.insert(n);
            d.erase(n);
        }
    cout<<"Union=";
}
    for(const auto &n : u){
        cout<<n<<' ';
    cout<<endl;
   }
cout<<"Intersection=";
    for(const auto &n : i){
        cout<<n<<' ';
    cout<<endl;
   }
cout<<"Difference=";
    for(const auto &n : d){
        cout<<n<<' ';
    cout<<endl;
}
}
void Problem14(){
    cout << "Problem 14" << endl;
    int n, e;
    cin >> n;
    vector<int> v;
    for(int i=0;i<n;++i){
        cin>>e;
        v.push_back(e);
    }
    set<int> s(v.begin(), v.end());
    v.assign(s.begin(),s.end());
    cout<<v.size()<<endl;
    for(const int &n : v){
        cout<<n<<" ";
}
}

void Problem15(){
    cout<<"Problem 15"<<endl;
    int q;
    cin>>q;
    string S;
    cin>>S;
    for (int i=0;i<q;++i){
        int l,r,k;
        cin>>l>>r>>k;
}
        if (k==1){
            sort(S.begin()+(l-1),S.begin()+r);
        }else{
            sort(S.begin()+(l-1),S.begin()+r,greater<char>());
    }
    cout<<S<<endl;
}
int getLastDigit(int number)
{
    return abs(number)%10;
}
void Problem16(){
    cout<<"Problem 16"<<endl;
    int n,j;
    cin>>n;
    set<int>s;
    for(int i=0;i<n;i++){
        cin>>j;
        s.insert(j);
    }
    for(int i=0; i<n/2; i++){
        if(getLastDigit(*next(s.begin(),i))!= getLastDigit(*next(s.begin(),n-1-i))){
            cout<<"Not symmetric"<<endl;
            show(s);
}
            return;
        }
    cout<<"Symmetric"<<endl;
    show(s);
}
void show(queue<int>q){
    while(!q.empty()){
        cout << q.front() << " ";
        q.pop();
    }
    cout<<endl;
}
void clear(queue<int> &q){
    queue<int>emptyQueue;
    swap(q,emptyQueue);
}

void Problem17(){
    cout<<"Problem 17"<<endl;
    queue<int>q;
    int i[]={5,3,10,32,95,-4,29};
    for(int n : i){
        q.push(n);
    cout<<q.size()<<endl;
    cout<<q.front()<<endl;
    cout<<q.back()<<endl;
}
    show(q);
    clear(q);
}
void Problem18(){
    cout<<"Problem 18"<<endl;
    stack<int>s;
    int num[]={43,90,100,30,28,1,34};
    for(int n : num){
        s.push(n);
    cout<<s.size()<<endl;
    cout<<s.top()<<endl;
}
    while(!s.empty() && s.top()!=30){
        s.pop();
}
    cout<<s.size()<<endl;
}

int main(){
    Problem1();
    Problem2();
    Problem3();
    Problem4();
    Problem5();
    Problem6();
    Problem7();
    Problem8();
    Problem9();
    Problem10();
    Problem11();
    Problem12();
    Problem13();
    Problem14();
    Problem15();
    Problem16();
    Problem17();
    Problem18();
    return 0;
}
